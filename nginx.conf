worker_processes  3;

error_log /opt/data1/nginx/logs/error.log;
#error_log  /var/log/nginx/error.log warn;
pid         /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

#    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                      '$status $body_bytes_sent "$http_referer" '
#                      '"$http_user_agent" "$http_x_forwarded_for"';
     access_log /opt/data1/nginx/logs/access.log combined;
    log_format webdav "$time_local - method: $request_method; "
        "context: $context; requested: $request_uri; "
        "rewritten: $document_uri;";
    log_format short_webdav "$time_local - method: $request_method; "
        "requested: $request_uri; "
        "rewritten: $document_uri;";


    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

#    include /etc/nginx/conf.d/*.conf;

       server {
        set $root_path /opt/data1;
        set $webdav_extensions_path /opt/data1/nginx/php/webdav-extensions.php;
        set $logs_path /opt/data1/nginx/logs;

        listen 80;
        server_name localhost;
        root $root_path;
        client_max_body_size    22m;

        location ~ ^/index(.*--/)*(.*)/$ {
            autoindex on;
            rewrite /index/(.*) /$1;
            break;
        }

        location ~ /diagnosis/([a-z]*) {
            root $logs_path;
            rewrite /diagnosis/(.*) /$1.log;
            break;
        }

        location ~ '^/(.*?)(/(.*)){0,1}$' {
            set $context    $1;
            access_log /opt/data1/nginx/logs/webdav.log webdav;

            auth_basic "File Storage Login";
            auth_basic_user_file $root_path/$context/.htpasswd;

            if ($request_method ~ ^(PUT|DELETE)$) {
                rewrite /(.*?)/.* /$1$webdav_uri_short_put break;
            }

            rewrite /(.*?)/.* /$1$webdav_uri;
            try_files $uri @archive_webdav_uri;

            dav_methods PUT DELETE;
           # dav methods PROPFIND OPTIONS;
            create_full_put_path on;
            dav_access user:rw;

            # Fast CGI request paramters
            fastcgi_param SCRIPT_FILENAME $webdav_extensions_path;
            fastcgi_param DEPTH $http_depth;
            fastcgi_param HOST $host;
            fastcgi_param DESTINATION $http_destination;
            fastcgi_param OVERWRITE $http_overwrite;
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_param REQUEST_METHOD $request_method;
            fastcgi_param CONTENT_TYPE $content_type;
            fastcgi_param CONTENT_LENGTH $content_length;
            fastcgi_param QUERY_STRING $query_string;

            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param DOCUMENT_URI $document_uri;
            fastcgi_param DOCUMENT_ROOT $document_root;
            fastcgi_param SERVER_PROTOCOL $server_protocol;

            fastcgi_param GATEWAY_INTERFACE CGI/1.1;
            fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;

            fastcgi_param REMOTE_ADDR $remote_addr;
            fastcgi_param REMOTE_PORT $remote_port;
            fastcgi_param SERVER_ADDR $server_addr;
            fastcgi_param SERVER_PORT $server_port;
            fastcgi_param SERVER_NAME $server_name;

            fastcgi_param HASH_DEPTH 1; # depends on $webdav_uri generation algorithms

            # PHP only, required if PHP was built with --enable-force-cgi-redirect
            fastcgi_param REDIRECT_STATUS 200;

            if ($request_method ~ ^(PROPFIND|OPTIONS)$) {
                fastcgi_pass localhost:9000;
            }
            break;
        }

        location @archive_webdav_uri {
            access_log /opt/data1/nginx/logs/archive_webdav.log webdav;
            root /opt/data1/archive;
            try_files $uri @short_uri;
            break;
        }

        location @short_uri {
            access_log /opt/data1/nginx/logs/short_webdav.log short_webdav;
            root $root_path;

            rewrite /(.*?)/.* /$1$webdav_uri_short;
            try_files $uri @archive_short_uri;
            break;
        }

        location @archive_short_uri {
            access_log /opt/data1/nginx/logs/archive_short_webdav.log short_webdav;
            root /opt/data1/archive;
        }

        location ~ /.*\.ht {
            deny  all;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    perl_set  $webdav_uri 'sub {
        use Digest::MD5 qw(md5_hex);
        my $r = shift;
        my $data = $r->uri;
          my @values = split("/", $data);

        my $result = "";
        my $count = 0;
        foreach my $val (@values) {
            if ($count > 1) {
                my $digest = md5_hex($val);
                my $delimiter = join("/",
                    substr($digest, 0, 3)."--",
                    substr($digest, 3, 3)."--",
                    substr($digest, 6, 3)."--",
                    substr($digest, 9, 3)."--");
                $result = join("/$delimiter/", $result, $val);
            }
            $count++;
          }

        return $result;
    }';

    perl_set  $webdav_uri_short 'sub {
        use Digest::MD5 qw(md5_hex);
        my $r = shift;
        $_ = $r->uri;
        s#/(.*)/(.*?--){4}/(.*)/(.*?--){4}/(.*)#/$3/$5#;
        my @values = split("/", $_);

        my $result = "";
        my $count = 0;
        foreach my $val (@values) {
            if ($count > 0) {
                my $digest = md5_hex($val);
                my $delimiter = join("/", substr($digest, 0, 4)."--");
                $result = join("/$delimiter/", $result, $val);
            }
            $count++;
          }

        return $result;
    }';

    perl_set  $webdav_uri_short_put 'sub {
        use Digest::MD5 qw(md5_hex);
        my $r = shift;
        my $data = $r->uri;
          my @values = split("/", $data);

        my $result = "";
        my $count = 0;
        foreach my $val (@values) {
            if ($count > 1) {
                my $digest = md5_hex($val);
                my $delimiter = join("/", substr($digest, 0, 4)."--");
                $result = join("/$delimiter/", $result, $val);
            }
            $count++;
          }

        return $result;
    }';
}

